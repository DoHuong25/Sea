<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f1f5f9; }
        .sidebar-link.active { background-color: #ef4444; color: white; font-weight: 600; }
        .sidebar-link:hover:not(.active) { background-color: #fee2e2; color: #b91c1c; }
        .filter-btn { transition: all 0.2s ease-in-out; border-bottom: 2px solid transparent; padding-bottom: 0.25rem; }
        .filter-btn.active { font-weight: 600; }
        .food-status-filter.active { border-bottom-color: #ef4444; color: #ef4444; }
        .user-filter-btn.active, .comment-filter-btn.active { border-bottom-color: #3b82f6; color: #3b82f6; }
        .spinner { border: 4px solid rgba(0,0,0,0.1); border-left-color: #ef4444; border-radius: 50%; width: 24px; height: 24px; animation: spin 1s linear infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
        .modal-overlay { position: fixed; inset: 0; background-color: rgba(0,0,0,0.6); z-index: 50; display: flex; justify-content: center; align-items: center; padding: 1rem; animation: fadeIn 0.3s ease-out; }
        .modal-container { background: white; border-radius: 0.5rem; box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25); width: 100%; max-height: 90vh; display: flex; flex-direction: column; animation: slideInUp 0.4s ease-out; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        @keyframes slideInUp { from { transform: translateY(30px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
        .clickable-item { cursor: pointer; }
    </style>
</head>
<body class="text-gray-800">
    <div id="toast-container" class="fixed top-5 right-5 z-[100] space-y-3"></div>

    <div class="flex h-screen bg-gray-100">
        <!-- Sidebar -->
        <aside class="w-64 bg-white shadow-md flex-shrink-0 flex flex-col">
            <div class="p-6"><a href="/admin" class="text-2xl font-extrabold text-red-600">AdminPanel</a></div>
            <nav class="mt-2 flex-1">
                <a href="/admin?page=statistics" class="sidebar-link flex items-center py-3 px-6 text-gray-700"><i class="fas fa-chart-line fa-fw mr-3"></i> Thống Kê</a>
                <a href="/admin?page=all-foods" class="sidebar-link flex items-center py-3 px-6 text-gray-700"><i class="fas fa-utensils fa-fw mr-3"></i> Món Ăn</a>
                <a href="/admin?page=users" class="sidebar-link flex items-center py-3 px-6 text-gray-700"><i class="fas fa-users-cog fa-fw mr-3"></i> Người Dùng</a>
                <a href="/admin?page=comments" class="sidebar-link flex items-center py-3 px-6 text-gray-700"><i class="fas fa-comments fa-fw mr-3"></i> Bình Luận</a>
            </nav>
            <div class="p-6"><a href="/logout" class="sidebar-link flex items-center py-2 px-4 text-gray-700 rounded-lg hover:bg-gray-200"><i class="fas fa-sign-out-alt fa-fw mr-3"></i> Đăng Xuất</a></div>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 flex flex-col overflow-hidden">
            <header class="bg-white shadow-sm">
                <div class="container mx-auto px-6 py-4 flex justify-between items-center">
                    <h1 id="page-title" class="text-2xl font-bold text-gray-800"></h1>
                    <div class="flex items-center">
                        <span class="mr-4 font-semibold">Chào, <%= locals.user ? locals.user.username : 'Admin' %>!</span>
                        <img class="h-10 w-10 rounded-full object-cover" src="<%= locals.user && locals.user.avatar ? locals.user.avatar : '/images/avatars/default-avatar.png' %>" alt="Avatar">
                    </div>
                </div>
            </header>
            <div id="main-content" class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-100 p-6">
                 <!-- JavaScript will render the entire page content here -->
            </div>
        </main>
    </div>

    <!-- Modals -->
    <div id="confirmation-modal" class="modal-overlay hidden"></div>
    <div id="form-modal" class="modal-overlay hidden"></div>
    <div id="detail-modal" class="modal-overlay hidden"></div>
    
    <script type="application/json" id="initial-data"><%- JSON.stringify({ CONFIG: locals.CONFIG || {}, user: locals.user || {} }) %></script>
    
<script>
document.addEventListener('DOMContentLoaded', function () {
    // --- GLOBAL STATE & CONFIG ---
    const { CONFIG, user: CURRENT_USER } = JSON.parse(document.getElementById('initial-data').textContent);
    
    let confirmCallback = null;
    let categoryChartInstance = null;
    const urlParams = new URLSearchParams(window.location.search);
    let currentPage = urlParams.get('page') || 'statistics';
    
    let currentFoodStatusFilter = 'all';
    let currentFoodNameSearch = '';
    let currentUserRoleFilter = 'all';
    let currentUserActivityFilter = 'all';
    let currentUserNameSearch = '';
    let currentCommentStarsFilter = 'all';

    const mainContent = document.getElementById('main-content');

    // --- TEMPLATES & HELPERS ---
    const templates = {
        loadingSpinner: () => `<div class="bg-white rounded-2xl shadow-lg p-6 text-center"><div class="spinner mx-auto"></div></div>`,
        emptyState: (icon, message) => `<div class="bg-white rounded-2xl shadow-lg p-6 text-center text-gray-500 py-12"><i class="fas ${icon} fa-3x mb-4"></i><p>${message}</p></div>`,
        renderStarRating: (count) => Array.from({length: 5}, (_, i) => `<i class="fa-solid fa-star ${i < count ? 'text-yellow-400' : 'text-gray-300'}"></i>`).join(''),
    };
    
    // --- CORE FUNCTIONS ---
    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toast-container');
        const toast = document.createElement('div');
        const icons = { success: 'fa-check-circle', error: 'fa-times-circle', info: 'fa-info-circle' };
        const colors = { success: 'bg-green-500', error: 'bg-red-500', info: 'bg-blue-500' };
        toast.className = `flex items-center text-white p-4 rounded-lg shadow-lg ${colors[type]} z-[100]`;
        toast.innerHTML = `<i class="fas ${icons[type]} mr-3 text-xl"></i><p class="font-semibold">${message}</p>`;
        toastContainer.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }
    function showConfirmModal(title, message, callback) {
        const modal = document.getElementById('confirmation-modal');
        modal.innerHTML = `<div class="modal-container max-w-sm"><div class="p-6 text-center"><h3 class="text-xl font-bold mb-4">${title}</h3><p class="text-gray-600 mb-6">${message}</p><div class="flex justify-center gap-4"><button type="button" class="close-modal-btn px-6 py-2 bg-gray-200 rounded-lg">Hủy</button><button type="button" id="modal-confirm-btn" class="px-6 py-2 bg-red-500 text-white rounded-lg">Xác Nhận</button></div></div></div>`;
        confirmCallback = callback;
        modal.classList.remove('hidden');
    }
    function hideAllModals() { document.querySelectorAll('.modal-overlay').forEach(m => m.classList.add('hidden')); }
    async function fetchData(url, method = 'GET', body = null) {
        try {
            const options = { method, headers: {} };
            if (body) {
                if (body instanceof FormData) {
                    options.body = body;
                } else {
                    options.headers['Content-Type'] = 'application/json';
                    options.body = JSON.stringify(body);
                }
            }
            const response = await fetch(url, options);
            const data = await response.json();
            if (!response.ok) throw new Error(data.message || 'Lỗi không xác định');
            return data;
        } catch (error) {
            showToast(error.message, 'error');
            return { success: false };
        }
    }

    // --- PAGE RENDERERS ---
    function renderPage(pageId) {
        const pageTitles = { statistics: 'Thống Kê', 'all-foods': 'Quản Lý Món Ăn', users: 'Quản Lý Người Dùng', comments: 'Quản Lý Bình Luận' };
        document.getElementById('page-title').textContent = pageTitles[pageId] || 'Trang Quản Trị';
        document.querySelectorAll('.sidebar-link').forEach(link => link.classList.toggle('active', new URL(link.href).searchParams.get('page') === pageId));
        mainContent.innerHTML = templates.loadingSpinner();

        if (pageId === 'statistics') renderStatisticsPage();
        else if (pageId === 'all-foods') renderFoodsPage();
        else if (pageId === 'users') renderUsersPage();
        else if (pageId === 'comments') renderCommentsPage();
    }
    
    async function renderStatisticsPage() {
        const data = await fetchData('/admin/api/dashboard-data');
        if (!data.success) { mainContent.innerHTML = templates.emptyState('fa-exclamation-triangle', 'Không thể tải dữ liệu thống kê.'); return; }
        const stats = data.data;
        mainContent.innerHTML = `<div class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div class="bg-white p-6 rounded-2xl shadow-md"><div><p class="text-sm font-medium text-gray-500">Món Ăn Chờ Duyệt</p><p class="text-3xl font-bold">${stats.stats.pendingFoods}</p></div></div>
                <div class="bg-white p-6 rounded-2xl shadow-md"><div><p class="text-sm font-medium text-gray-500">Tổng Số Món Ăn</p><p class="text-3xl font-bold">${stats.stats.totalFoods}</p></div></div>
                <div class="bg-white p-6 rounded-2xl shadow-md"><div><p class="text-sm font-medium text-gray-500">Tổng Người Dùng</p><p class="text-3xl font-bold">${stats.stats.totalUsers}</p></div></div>
            </div>
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div class="lg:col-span-1 bg-white p-6 rounded-2xl shadow-md"><h3 class="font-bold text-lg mb-4">Phân Bố Món Ăn</h3><div class="h-64"><canvas id="category-chart"></canvas></div></div>
                <div class="lg:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="bg-white p-6 rounded-2xl shadow-md"><h3 class="font-bold text-lg mb-4">Top Món Ăn Quan Tâm</h3><ul id="stats-top-foods" class="space-y-3"></ul></div>
                    <div class="bg-white p-6 rounded-2xl shadow-md"><h3 class="font-bold text-lg mb-4">Top User Tích Cực</h3><ul id="stats-top-users" class="space-y-3"></ul></div>
                </div>
            </div>
        </div>`;
        renderCategoryChart(stats.categoryDistribution);
        renderTopList('stats-top-foods', stats.topFoods, item => `<span class="truncate font-medium">${item.name}</span><span class="font-bold text-red-500"><i class="fas fa-star text-yellow-400 mr-1"></i> ${item.avgRating ? item.avgRating.toFixed(1) : '0'} (${item.totalRatings})</span>`);
        renderTopList('stats-top-users', stats.topUsers, item => `<span class="truncate font-medium">${item.username}</span><span class="font-bold text-red-500"><i class="fas fa-pen-alt text-gray-400 mr-1"></i> ${item.foodCount}</span>`);
    }

    function renderFoodsPage() {
        mainContent.innerHTML = `<div class="bg-white rounded-2xl shadow-lg p-6"><div class="flex flex-col gap-4 mb-4 border-b pb-4"><div class="flex items-center justify-between gap-4"><div id="food-status-filters" class="flex items-center space-x-4"><button class="filter-btn food-status-filter" data-filter-value="all">Tất cả</button><button class="filter-btn food-status-filter" data-filter-value="pending">Chờ duyệt</button><button class="filter-btn food-status-filter" data-filter-value="approved">Đã duyệt</button></div><button id="add-new-food-btn" class="bg-red-500 text-white font-bold px-4 py-2 rounded-lg">Thêm món mới</button></div><div class="relative"><input type="text" id="food-search-input" placeholder="Tìm theo tên món ăn..." class="w-full pl-10 pr-4 py-2 border rounded-lg" value="${currentFoodNameSearch}"><i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i></div></div><div id="list-container">${templates.loadingSpinner()}</div></div>`;
        document.querySelector(`#food-status-filters .filter-btn[data-filter-value="${currentFoodStatusFilter}"]`)?.classList.add('active');
        fetchAndRenderFoods();
    }

    function renderUsersPage() {
        mainContent.innerHTML = `<div class="bg-white rounded-2xl shadow-lg p-6"><div class="flex flex-col gap-4 mb-4 border-b pb-4"><div class="flex flex-wrap items-center justify-between gap-y-4"><div class="flex flex-wrap items-center gap-x-6 gap-y-2"><div id="user-role-filters" class="flex items-center space-x-4"><span class="text-sm font-semibold text-gray-500">Vai trò:</span><button class="filter-btn user-filter-btn" data-filter-type="role" data-filter-value="all">Tất cả</button><button class="filter-btn user-filter-btn" data-filter-type="role" data-filter-value="admin">Admin</button><button class="filter-btn user-filter-btn" data-filter-type="role" data-filter-value="user">User</button></div><div id="user-activity-filters" class="flex items-center space-x-4"><span class="text-sm font-semibold text-gray-500">Hoạt động:</span><button class="filter-btn user-filter-btn" data-filter-type="activity" data-filter-value="all">Tất cả</button><button class="filter-btn user-filter-btn" data-filter-type="activity" data-filter-value="active">Đã hoạt động</button><button class="filter-btn user-filter-btn" data-filter-type="activity" data-filter-value="inactive">Chưa hoạt động</button></div></div><button id="add-new-user-btn" class="sm:ml-auto bg-blue-500 text-white font-bold px-4 py-2 rounded-lg">Thêm người dùng</button></div><div class="relative"><input type="text" id="user-search-input" placeholder="Tìm theo tên hoặc email..." class="w-full pl-10 pr-4 py-2 border rounded-lg" value="${currentUserNameSearch}"><i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i></div></div><div id="list-container">${templates.loadingSpinner()}</div></div>`;
        document.querySelector(`#user-role-filters .filter-btn[data-filter-value="${currentUserRoleFilter}"]`)?.classList.add('active');
        document.querySelector(`#user-activity-filters .filter-btn[data-filter-value="${currentUserActivityFilter}"]`)?.classList.add('active');
        fetchAndRenderUsers();
    }

    function renderCommentsPage() {
        mainContent.innerHTML = `<div class="bg-white rounded-2xl shadow-lg p-6"><div class="flex justify-between items-center mb-4 border-b pb-4"><h2 class="text-xl font-bold text-gray-700">Danh Sách Bình Luận</h2><div id="comment-filter-controls" class="flex items-center space-x-4"><button class="filter-btn comment-filter-btn" data-filter-value="all">Tất cả</button><button class="filter-btn comment-filter-btn" data-filter-value="3-5">Tốt</button><button class="filter-btn comment-filter-btn" data-filter-value="1-2">Tệ</button></div></div><div id="list-container">${templates.loadingSpinner()}</div></div>`;
        document.querySelector(`#comment-filter-controls .filter-btn[data-filter-value="${currentCommentStarsFilter}"]`)?.classList.add('active');
        fetchAndRenderComments();
    }
    
    // --- DATA FETCHING & LIST RENDERING ---
    async function fetchAndRenderFoods() {
        const params = new URLSearchParams({ status: currentFoodStatusFilter, q: currentFoodNameSearch });
        const data = await fetchData(`/admin/api/foods?${params.toString()}`);
        const container = document.getElementById('list-container');
        if (!container) return;
        if (!data?.success || !data.foods.length) { container.innerHTML = templates.emptyState('fa-utensils', 'Không có món ăn nào.'); return; }
        renderFoodList(data.foods);
    }
    async function fetchAndRenderUsers() {
        const params = new URLSearchParams({ role: currentUserRoleFilter, activity: currentUserActivityFilter, q: currentUserNameSearch });
        const data = await fetchData(`/admin/api/users?${params.toString()}`);
        const container = document.getElementById('list-container');
        if (!container) return;
        if (!data?.success || !data.users.length) { container.innerHTML = templates.emptyState('fa-user-slash', 'Không có người dùng nào.'); return; }
        renderUsersList(data.users);
    }
    async function fetchAndRenderComments() {
        const data = await fetchData(`/admin/api/comments?stars=${currentCommentStarsFilter}`);
        const container = document.getElementById('list-container');
        if(!container) return;
        if (!data?.success || !data.comments.length) { container.innerHTML = templates.emptyState('fa-comment-slash', 'Không có bình luận nào.'); return; }
        renderCommentList(data.comments);
    }
    
    function renderFoodList(foods) {
        const container = document.getElementById('list-container');
        const rows = foods.map(food => {
            const statusBadge = food.status === 'approved' ? `<span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">Đã duyệt</span>` : `<span class="px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">Chờ duyệt</span>`;
            const actions = food.status === 'approved'
                ? `<button class="edit-btn text-blue-500" data-id="${food._id}" data-type="food" title="Sửa"><i class="fas fa-edit"></i></button><button class="delete-btn text-red-500 ml-3" data-id="${food._id}" data-type="food" title="Xóa"><i class="fas fa-trash"></i></button>`
                : `<button class="approve-btn text-green-500" data-id="${food._id}" title="Duyệt"><i class="fas fa-check-circle"></i></button><button class="reject-btn text-red-500 ml-3" data-id="${food._id}" title="Từ chối"><i class="fas fa-times-circle"></i></button>`;
            return `<tr class="border-b hover:bg-gray-50 text-sm"><td class="p-3 font-medium"><a href="#" class="flex items-center clickable-item" data-type="food" data-id="${food._id}"><img src="${food.image}" class="w-16 h-12 object-cover rounded-md mr-4" alt="${food.name}"><div class="flex-grow">${food.name}</div></a></td><td class="p-3">${food.province}</td><td class="p-3 text-center">${statusBadge}</td><td class="p-3 text-center"><i class="fas fa-comments text-gray-400 mr-1"></i> ${food.ratings.length}</td><td class="p-3 text-center">${actions}</td></tr>`;
        }).join('');
        container.innerHTML = `<div class="overflow-x-auto"><table class="w-full text-left"><thead><tr class="bg-gray-200 text-sm"><th class="p-3">Món Ăn</th><th class="p-3">Tỉnh/TP</th><th class="p-3 text-center">Trạng Thái</th><th class="p-3 text-center">Đánh giá</th><th class="p-3 text-center">Hành Động</th></tr></thead><tbody>${rows}</tbody></table></div>`;
    }

    function renderUsersList(users) {
        const container = document.getElementById('list-container');
        const rows = users.map(user => {
            const isSelf = CURRENT_USER._id === user._id;
            let actions = `<button class="edit-btn text-blue-500" data-id="${user._id}" data-type="user" title="Sửa"><i class="fas fa-edit"></i></button>`;
            if (!isSelf && user.role !== 'admin') {
                actions += `<button class="make-admin-btn text-green-500 ml-3" data-id="${user._id}" title="Cấp quyền Admin"><i class="fas fa-user-shield"></i></button>`;
            }
            if (!isSelf) {
                actions += `<button class="delete-btn text-red-500 ml-3" data-id="${user._id}" data-type="user" title="Xóa"><i class="fas fa-trash"></i></button>`;
            }
            return `<tr class="border-b hover:bg-gray-50 text-sm"><td class="p-3"><a href="#" class="flex items-center clickable-item" data-type="user" data-id="${user._id}"><img src="${user.avatar || '/images/avatars/default-avatar.png'}" class="w-10 h-10 rounded-full mr-4"><span class="font-medium">${user.username}</span></a></td><td class="p-3">${user.email || 'N/A'}</td><td class="p-3"><span class="font-semibold ${user.role === 'admin' ? 'text-red-600' : ''}">${user.role}</span></td><td class="p-3 text-center">${actions}</td></tr>`;
        }).join('');
        container.innerHTML = `<div class="overflow-x-auto"><table class="w-full text-left"><thead><tr class="bg-gray-200 text-sm"><th class="p-3">Người dùng</th><th class="p-3">Email</th><th class="p-3">Vai trò</th><th class="p-3 text-center">Hành động</th></tr></thead><tbody>${rows}</tbody></table></div>`;
    }

    function renderCommentList(comments) {
        const container = document.getElementById('list-container');
        const rows = comments.map(c => `
            <tr class="border-b hover:bg-gray-50 text-sm">
                <td class="p-3 font-medium"><a href="#" class="text-red-600 hover:underline clickable-item" data-type="food" data-id="${c.foodId}">${c.foodName}</a></td>
                <td class="p-3">${c.userId ? `<a href="#" class="text-blue-600 hover:underline clickable-item" data-type="user" data-id="${c.userId}">${c.username}</a>` : `<span class="text-gray-500">${c.username}</span>`}</td>
                <td class="p-3 text-center">${templates.renderStarRating(c.stars)}</td>
                <td class="p-3 text-gray-600">${(c.commentText || '').substring(0,50)}...</td>
                <td class="p-3 text-center"><button class="delete-btn text-red-500" data-type="comment" data-food-id="${c.foodId}" data-comment-id="${c.commentId}" title="Xóa"><i class="fas fa-trash"></i></button></td>
            </tr>`).join('');
        container.innerHTML = `<div class="overflow-x-auto"><table class="w-full text-left"><thead><tr class="bg-gray-200 text-sm"><th class="p-3">Món Ăn</th><th class="p-3">Người Dùng</th><th class="p-3 text-center">Đánh giá</th><th class="p-3">Bình luận</th><th class="p-3 text-center">Hành động</th></tr></thead><tbody>${rows}</tbody></table></div>`;
    }
    
    function renderFoodForm(foodToEdit = null) {
        const isEditing = !!foodToEdit;
        const modal = document.getElementById('form-modal');
        const options = (CONFIG.CATEGORIES || []).map(c => `<option value="${c}" ${foodToEdit?.category === c ? 'selected' : ''}>${c}</option>`).join('');
               
        modal.classList.remove('hidden');
    }

    function renderFoodForm(foodToEdit = null) {
        const isEditing = !!foodToEdit;
        const modal = document.getElementById('form-modal');
        const options = (CONFIG.CATEGORIES || []).map(c => `<option value="${c}" ${foodToEdit?.category === c ? 'selected' : ''}>${c}</option>`).join('');
        const formHtml = `
            <div class="modal-container max-w-2xl"><form id="main-form" data-type="food" data-id="${isEditing ? foodToEdit._id : ''}" class="p-8 space-y-4">
                <div class="flex justify-between items-center"><h2 class="text-2xl font-bold">${isEditing ? 'Chỉnh Sửa' : 'Thêm'} Món Ăn</h2><button type="button" class="close-modal-btn text-2xl">&times;</button></div>
                <div><label class="font-semibold text-sm">Tên món*</label><input name="name" required class="w-full p-2 rounded-lg border" value="${foodToEdit?.name || ''}"></div>
                <div><label class="font-semibold text-sm">Mô tả</label><textarea name="description" rows="3" class="w-full p-2 rounded-lg border">${foodToEdit?.description || ''}</textarea></div>
                <div><label class="font-semibold text-sm">Loại hải sản*</label><select name="category" required class="w-full p-2 rounded-lg border">${options}</select></div>
                <div id="other-category-container"></div>
                <div><label class="font-semibold text-sm">Tỉnh/TP*</label><input name="province" required class="w-full p-2 rounded-lg border" value="${foodToEdit?.province || ''}"></div>
                <div><label class="font-semibold text-sm">Địa điểm gợi ý*</label><input name="suggestedAt" required class="w-full p-2 rounded-lg border" value="${foodToEdit?.suggestedAt || ''}"></div>
                <div><label class="font-semibold text-sm">Ảnh</label>${isEditing && foodToEdit.image ? `<img src="${foodToEdit.image}" class="w-32 h-auto rounded-md my-2">` : ''}<input type="file" name="image" ${!isEditing ? 'required' : ''}></div>
                <div class="flex justify-end gap-4 pt-4"><button type="button" class="close-modal-btn px-6 py-2 bg-gray-200 rounded-lg">Hủy</button><button type="submit" class="px-8 py-2 bg-red-500 text-white rounded-lg">${isEditing ? 'Lưu' : 'Thêm'}</button></div>
            </form></div>`;
        modal.innerHTML = formHtml;
        modal.querySelector('select[name="category"]').addEventListener('change', e => {
            const container = modal.querySelector('#other-category-container');
            if (e.target.value === 'Các loại khác') {
                container.innerHTML = `<div><label class="font-semibold text-sm">Tên loại khác*</label><input name="otherCategoryName" required class="w-full p-2 rounded-lg border" value=""></div>`;
            } else {
                container.innerHTML = '';
            }
        });
        modal.classList.remove('hidden');
    }
    function renderFoodDetailModal(food) {
        const detailModal = document.getElementById('detail-modal');
        const commentsHtml = food.ratings.length > 0 ? food.ratings.map(rating => {
            const commenterName = rating.userId?.username || 'Người dùng đã bị xóa';
            const commenterLink = rating.userId ? `<a href="#" class="font-semibold text-gray-800 hover:underline clickable-item" data-type="user" data-id="${rating.userId._id}">${commenterName}</a>` : `<span class="font-semibold text-gray-500">${commenterName}</span>`;
            return `<div class="p-3 bg-gray-50 rounded-lg flex items-start space-x-3"><div class="flex-grow"><div class="flex justify-between items-center">${commenterLink}<span class="text-xs text-gray-500">${new Date(rating.createdAt).toLocaleDateString('vi-VN')}</span></div><div class="text-sm my-1">${templates.renderStarRating(rating.stars)}</div><p class="text-sm text-gray-700">${rating.comment || ''}</p></div><button class="delete-btn text-gray-400 hover:text-red-500" data-type="comment" data-food-id="${food._id}" data-comment-id="${rating._id}" title="Xóa bình luận"><i class="fas fa-times-circle"></i></button></div>`;
        }).join('') : '<p class="text-center text-gray-500 py-4">Chưa có đánh giá nào.</p>';

        detailModal.innerHTML = `<div class="modal-container max-w-3xl"><div class="p-6 overflow-y-auto"><div class="flex justify-between items-start mb-4"><h2 class="text-3xl font-bold text-gray-800">${food.name}</h2><button class="close-modal-btn text-2xl">&times;</button></div><img src="${food.image}" class="w-full h-64 object-cover rounded-lg mb-4"><p class="text-gray-600 mb-6">${food.description || ''}</p><div class="mt-6"><h3 class="text-2xl font-bold mb-4 border-t pt-4">Đánh Giá (${food.ratings.length})</h3><div class="space-y-4 max-h-64 overflow-y-auto pr-2">${commentsHtml}</div></div></div></div>`;
        detailModal.classList.remove('hidden');
    }
    function renderUserDetailModal(details) {
        const { user, postedFoods, comments } = details;
        const detailModal = document.getElementById('detail-modal');
        const postedFoodsHtml = postedFoods.length > 0 ? postedFoods.map(food => `<li><a href="#" class="text-sm hover:underline clickable-item" data-type="food" data-id="${food._id}">${food.name}</a></li>`).join('') : `<li class="text-sm text-gray-500">Chưa đăng món nào.</li>`;
        const commentsHtml = comments.length > 0 ? comments.map(c => `<li class="p-2 bg-gray-50 rounded-md"><a href="#" class="font-bold hover:underline clickable-item" data-type="food" data-id="${c.foodId}">${c.foodName}</a>: <span class="text-gray-600">"${c.comment}"</span></li>`).join('') : `<li class="text-sm text-gray-500">Chưa có bình luận nào.</li>`;

        detailModal.innerHTML = `<div class="modal-container max-w-xl"><div class="p-6 overflow-y-auto"><div class="flex justify-end"><button class="close-modal-btn text-2xl">&times;</button></div><div class="text-center"><img src="${user.avatar || '/images/avatars/default-avatar.png'}" class="w-24 h-24 rounded-full mx-auto mb-4"><h2 class="text-2xl font-bold">${user.username}</h2><p class="text-gray-500">${user.email || ''}</p></div><div class="mt-6 space-y-4"><div><h4 class="font-bold border-b pb-1 mb-2">Các món đã đăng (${postedFoods.length})</h4><ul class="space-y-1 list-disc list-inside">${postedFoodsHtml}</ul></div><div><h4 class="font-bold border-b pb-1 mb-2">Các bình luận (${comments.length})</h4><ul class="space-y-2 max-h-48 overflow-y-auto pr-2">${commentsHtml}</ul></div></div></div></div>`;
        detailModal.classList.remove('hidden');
    }
    
    function renderCategoryChart(data) {
        const labels = data.map(item => item._id);
        const values = data.map(item => item.count);
        const ctx = document.getElementById('category-chart')?.getContext('2d');
        if (!ctx) return;
        if (categoryChartInstance) categoryChartInstance.destroy();
        if (labels.length === 0) { ctx.canvas.parentNode.innerHTML = '<p class="text-center text-gray-500">Chưa có dữ liệu.</p>'; return; }
        categoryChartInstance = new Chart(ctx, { type: 'doughnut', data: { labels: labels, datasets: [{ data: values, backgroundColor: ['#ef4444', '#f97316', '#f59e0b', '#84cc16', '#22c55e', '#10b981'], hoverOffset: 4 }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom', labels: { boxWidth: 12 } } } } });
    }
    function renderTopList(elementId, data, templateFn) {
        const container = document.getElementById(elementId);
        if (!data || !data.length) { container.innerHTML = '<li class="text-gray-500">Chưa có dữ liệu.</li>'; return; }
        container.innerHTML = data.map(item => `<li class="flex items-center justify-between text-sm">${templateFn(item)}</li>`).join('');
    }

    // --- EVENT HANDLER ---
    document.body.addEventListener('click', async (e) => {
        const target = e.target;
        
        if (target.closest('.close-modal-btn') || (target.matches('.modal-overlay') && !target.closest('.modal-container'))) { hideAllModals(); return; }
        if (target.id === 'modal-confirm-btn' && confirmCallback) { hideAllModals(); confirmCallback(); return; }
        
        const sidebarLink = target.closest('.sidebar-link');
        if (sidebarLink) {
            e.preventDefault();
            currentPage = new URL(sidebarLink.href).searchParams.get('page');
            window.history.pushState({page: currentPage}, '', sidebarLink.href);
            renderPage(currentPage);
        }

        const filterBtn = target.closest('.filter-btn');
        if(filterBtn){
            if (filterBtn.matches('.food-status-filter')) { currentFoodStatusFilter = filterBtn.dataset.filterValue; renderFoodsPage(); }
            else if (filterBtn.matches('.user-filter-btn')) {
                const { filterType, filterValue } = filterBtn.dataset;
                if (filterType === 'role') currentUserRoleFilter = filterValue;
                else if (filterType === 'activity') currentUserActivityFilter = filterValue;
                renderUsersPage();
            }
            else if (filterBtn.matches('.comment-filter-btn')) { currentCommentStarsFilter = filterBtn.dataset.filterValue; renderCommentsPage(); }
        }

        const clickableItem = target.closest('.clickable-item');
        if(clickableItem){
            e.preventDefault();
            const { type, id } = clickableItem.dataset;
            if(!id) return;
            
            const detailModal = document.getElementById('detail-modal');
            detailModal.innerHTML = `<div class="modal-container max-w-3xl">${templates.loadingSpinner()}</div>`;
            detailModal.classList.remove('hidden');

            if (type === 'food') {
                const data = await fetchData(`/admin/api/foods/${id}`);
                if(data.success) renderFoodDetailModal(data.food);
            } else if (type === 'user') {
                const data = await fetchData(`/admin/api/users/${id}/details`);
                if(data.success) renderUserDetailModal(data.details);
            }
        }
        
        const actionBtn = target.closest('button:not(.filter-btn):not(.close-modal-btn)');
        if(actionBtn){
             const id = actionBtn.closest('[data-id]')?.dataset.id;
             const type = actionBtn.dataset.type;

            if (actionBtn.id === 'add-new-food-btn') { renderFoodForm(); return; }
            if (actionBtn.id === 'add-new-user-btn') { renderUserForm(); return; }

            if (actionBtn.matches('.edit-btn')) {
                const data = await fetchData(`/admin/api/${type}s/${id}`);
                if (data.success) type === 'food' ? renderFoodForm(data.food) : renderUserForm(data.user);
            } else if (actionBtn.matches('.delete-btn')) {
                const { foodId, commentId } = actionBtn.dataset;
                if (type === 'comment') {
                    showConfirmModal('Xóa Bình Luận', 'Bạn chắc chắn muốn xóa bình luận này?', () => fetchData(`/admin/foods/${foodId}/comments/${commentId}`, 'DELETE').then(r => r.success && (currentPage === 'comments' ? fetchAndRenderComments() : document.querySelector(`.clickable-item[data-id="${foodId}"]`).click())));
                } else {
                    const entity = type === 'food' ? 'món ăn' : 'người dùng';
                    showConfirmModal(`Xóa ${entity}`, `Hành động này sẽ xóa vĩnh viễn ${entity}.`, () => fetchData(`/admin/${type}s/${id}`, 'DELETE').then(r => r.success && (type === 'food' ? renderFoodsPage() : renderUsersPage())));
                }
            } else if (actionBtn.matches('.make-admin-btn')) {
                showConfirmModal('Cấp Quyền Admin', 'Bạn có muốn cấp quyền Admin cho người dùng này?', () => fetchData(`/admin/users/${id}/make-admin`, 'POST').then(r => r.success && renderUsersPage()));
            } else if (actionBtn.matches('.approve-btn')) {
                showConfirmModal('Duyệt Món Ăn', 'Bạn chắc chắn duyệt món ăn này?', () => fetchData(`/admin/foods/${id}/approve`, 'POST').then(r => r.success && renderFoodsPage()));
            } else if (actionBtn.matches('.reject-btn')) {
                showConfirmModal('Từ Chối Món Ăn', 'Hành động này sẽ xóa món ăn. Bạn chắc chứ?', () => fetchData(`/admin/foods/${id}/reject`, 'POST').then(r => r.success && renderFoodsPage()));
            }
        }
    });

    document.body.addEventListener('submit', async (e) => {
        if (e.target.id !== 'main-form') return;
        e.preventDefault();
        const form = e.target;
        const { type, id } = form.dataset;
        const isFood = type === 'food';
        const formData = new FormData(form);
        const url = `/admin/${type}s/${id ? `edit/${id}` : 'add'}`;
        const result = await fetchData(url, 'POST', isFood ? formData : Object.fromEntries(formData));
        if (result.success) {
            hideAllModals();
            showToast(result.message);
            if (isFood) renderFoodsPage(); else renderUsersPage();
        }
    });
    
    const debounce = (func, delay) => {
        let timeout;
        return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
        };
    };

    const handleSearchInput = debounce((e) => {
        if (e.target.id === 'food-search-input') {
            currentFoodNameSearch = e.target.value;
            fetchAndRenderFoods();
        } else if (e.target.id === 'user-search-input') {
            currentUserNameSearch = e.target.value;
            fetchAndRenderUsers();
        }
    }, 400);

    mainContent.addEventListener('input', (e) => {
        if (e.target.matches('#food-search-input, #user-search-input')) {
            handleSearchInput(e);
        }
    });

    // --- INITIALIZATION ---
    function initialize() {
        if (CURRENT_USER.username) {
            document.getElementById('admin-username').textContent = `Chào, ${CURRENT_USER.username}!`;
            document.getElementById('admin-avatar').src = CURRENT_USER.avatar || '/images/avatars/default-avatar.png';
        }
        window.addEventListener('popstate', (e) => renderPage(e.state?.page || 'statistics'));
        renderPage(currentPage);
    }

    initialize();
});
</script>
</body>
</html>
